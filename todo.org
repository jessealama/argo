* DONE Version 0.1 [3/3]
  In version 0.1, I envision a library for JSON validation. No binary.
  - [X] Basic Scribble documentation
  - [X] Complete info.rkt (description is missing, at a minimum)
  - [X] Declare dependencies
** What's NOT in the initial version
   A binary (it's a library)

   No raco integration
* Schema validation
  That is, checking whether jsexpr? is a JSON Schema.
** Positive [2/35]
   - [X] multipleOf
   - [ ] maximum
   - [ ] exclusiveMaximum
   - [ ] minimum
   - [ ] exclusiveMinimum
   - [ ] maxLength
   - [ ] minLength
   - [ ] pattern
   - [ ] items
   - [ ] additionalItems
   - [ ] maxItems
   - [ ] minItems
   - [ ] uniqueItems
   - [ ] contains
   - [ ] maxProperties
   - [ ] minProperties
   - [ ] required
   - [ ] properties
   - [ ] patternProperties
   - [ ] additionalProperties
   - [ ] dependencies
   - [ ] propertyNames
   - [ ] enum
   - [ ] const
   - [X] type
   - [ ] allOf
   - [ ] anyOf
   - [ ] oneOf
   - [ ] not
   - [ ] definitions
   - [ ] title
   - [ ] description
   - [ ] default
   - [ ] examples
   - [ ] format
** Negative [/]
   - [ ] multipleOf
   - [ ] maximum
   - [ ] exclusiveMaximum
   - [ ] minimum
   - [ ] exclusiveMinimum
   - [ ] maxLength
   - [ ] minLength
   - [ ] pattern
   - [ ] items
   - [ ] additionalItems
   - [ ] maxItems
   - [ ] minItems
   - [ ] uniqueItems
   - [ ] contains
   - [ ] maxProperties
   - [ ] minProperties
   - [ ] required
   - [ ] properties
   - [ ] patternProperties
   - [ ] additionalProperties
   - [ ] dependencies
   - [ ] propertyNames
   - [ ] enum
   - [ ] const
   - [ ] type
   - [ ] allOf
   - [ ] anyOf
   - [ ] oneOf
   - [ ] not
   - [ ] definitions
   - [ ] title
   - [ ] description
   - [ ] default
   - [ ] examples
   - [ ] format
* Validation of instances
** DONE When checking negative cases, check that the schema really is a schema
   The invert-exit-code script is used to check that an instance does not satisfy the schema.

   Not checking this could lead to false positives.
** Validation
*** Positive
**** TODO multipleOf
**** TODO maximum
**** TODO exclusiveMaximum
**** TODO minimum
**** TODO exclusiveMinimum
**** TODO maxLength
**** TODO minLength
**** TODO pattern
**** TODO items
**** TODO additionalItems
**** TODO maxItems
**** TODO minItems
**** TODO uniqueItems
**** TODO contains
**** TODO maxProperties
**** TODO minProperties
**** TODO required
**** TODO properties
**** TODO patternProperties
**** TODO additionalProperties
**** TODO dependencies
**** TODO propertyNames
**** TODO enum
**** TODO const
**** TODO type
**** TODO allOf
**** TODO anyOf
**** TODO oneOf
**** TODO not
*** Negative
**** TODO multipleOf
**** TODO maximum
**** TODO exclusiveMaximum
**** TODO minimum
**** TODO exclusiveMinimum
**** TODO maxLength
**** TODO minLength
**** TODO pattern
**** TODO items
**** TODO additionalItems
**** TODO maxItems
**** TODO minItems
**** TODO uniqueItems
**** TODO contains
**** TODO maxProperties
**** TODO minProperties
**** TODO required
**** TODO properties
**** TODO patternProperties
**** TODO additionalProperties
**** TODO dependencies
**** TODO propertyNames
**** TODO enum
**** TODO const
**** TODO type
**** TODO allOf
**** TODO anyOf
**** TODO oneOf
**** TODO not
* DONE Check that a JSON document is a schema
  That involves checking that, if the validation keywords are present on a JSON object, that they have the right values

  http://json-schema.org/latest/json-schema-validation.html
** Validation keywords [29/29]
   - [X] multipleOf
   - [X] maximum
   - [X] exclusiveMaximum
   - [X] minimum
   - [X] exclusiveMinimum
   - [X] maxLength
   - [X] minLength
   - [X] pattern
   - [X] items
   - [X] additionalItems
   - [X] maxItems
   - [X] minItems
   - [X] uniqueItems
   - [X] contains
   - [X] maxProperties
   - [X] minProperties
   - [X] required
   - [X] properties
   - [X] patternProperties
   - [X] additionalProperties
   - [X] dependencies
   - [X] propertyNames
   - [X] enum
   - [X] const
   - [X] type
   - [X] allOf
   - [X] anyOf
   - [X] oneOf
   - [X] not
** [[http://json-schema.org/latest/json-schema-validation.html#rfc.section.7][Metadata keywords]] [5/5]
   - [X] definitions
   - [X] title
   - [X] description
   - [X] default
   - [X] examples
** [[http://json-schema.org/latest/json-schema-validation.html#rfc.section.8][Semantic validation keywords]]
   For the problem of checking whether a JSON document is a JSON schema, it suffices to check that, if the format key is present, that is has one of these values.

   Validating inputs against these keywords is a different problem.
*** DONE date-time
*** DONE email
*** DONE hostname
*** DONE ipv4
*** TODO ipv6
*** DONE uri
*** DONE uri-reference
*** TODO uri-template
*** DONE json-pointer
* DONE json-schema.org person example
  Validate positive and negatie instances
* DONE Verify that the Space Telescope Institute address schema really is a schema
  :LOGBOOK:
  CLOCK: [2017-08-05 Sat 06:05]--[2017-08-05 Sat 07:26] =>  1:21
  :END:
  definitions keyword not handled?
* DONE Verify the positive integer example
* DONE Add regular expression tests
  https://spacetelescope.github.io/understanding-json-schema/reference/regular_expressions.html
* DONE JSON pointers
** DONE Define a test for whether a string is a JSON pointer
   Do I have some examples (and non-examples)?
** TODO Evaluation
*** TODO Define an exception for referring to an item that does not exist
*** DONE Add the tests in the RFC
    https://tools.ietf.org/html/rfc6901
*** DONE Get the tests to work
*** DONE Add tests from the Space Telescope Science Institute example
    https://spacetelescope.github.io/understanding-json-schema/structuring.html
* DONE Library documentation
